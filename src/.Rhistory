# Combining the multiplayers dummies into one column
df_games_complete$multiplayer <- ifelse(df_games_complete$players1_mp | df_games_complete$players2_mp | df_games_complete$players3_mp | df_games_complete$players4_mp | df_games_complete$players5_mp == "1", 1, 0)
# Create dummies for coop
df_games_complete$players1_co <- ifelse(df_games_complete$players1 == "coop", 1, 0)
df_games_complete$players2_co <- ifelse(df_games_complete$players2 == "coop", 1, 0)
df_games_complete$players3_co <- ifelse(df_games_complete$players3 == "coop", 1, 0)
df_games_complete$players4_co <- ifelse(df_games_complete$players4 == "coop", 1, 0)
df_games_complete$players5_co <- ifelse(df_games_complete$players5 == "coop", 1, 0)
# Combining the coop dummies into one column
df_games_complete$coop <- ifelse(df_games_complete$players1_co | df_games_complete$players2_co | df_games_complete$players3_co | df_games_complete$players4_co | df_games_complete$players5_co == "1", 1, 0)
# Create dummies for online coop
df_games_complete$players1_oc <- ifelse(df_games_complete$players1 == "onlinecoop", 1, 0)
df_games_complete$players2_oc <- ifelse(df_games_complete$players2 == "onlinecoop", 1, 0)
df_games_complete$players3_oc <- ifelse(df_games_complete$players3 == "onlinecoop", 1, 0)
df_games_complete$players4_oc <- ifelse(df_games_complete$players4 == "onlinecoop", 1, 0)
df_games_complete$players5_oc <- ifelse(df_games_complete$players5 == "onlinecoop", 1, 0)
# Combining the online coop dummies into one column
df_games_complete$o_coop <- ifelse(df_games_complete$players1_oc | df_games_complete$players2_oc | df_games_complete$players3_oc | df_games_complete$players4_oc | df_games_complete$players5_oc == "1", 1, 0)
# Create dummies for pvp
df_games_complete$players1_pvp <- ifelse(df_games_complete$players1 == "pvp", 1, 0)
df_games_complete$players2_pvp <- ifelse(df_games_complete$players2 == "pvp", 1, 0)
df_games_complete$players3_pvp <- ifelse(df_games_complete$players3 == "pvp", 1, 0)
df_games_complete$players4_pvp <- ifelse(df_games_complete$players4 == "pvp", 1, 0)
df_games_complete$players5_pvp <- ifelse(df_games_complete$players5 == "pvp", 1, 0)
# Combining the pvp dummies into one column
df_games_complete$pvp <- ifelse(df_games_complete$players1_pvp | df_games_complete$players2_pvp | df_games_complete$players3_pvp | df_games_complete$players4_pvp | df_games_complete$players5_pvp == "1", 1, 0)
# Remove obsolete column which were use for creating dummies
df_games_complete <- df_games_complete %>%
select(-c("players1_si","players2_si", "players3_si", "players4_si", "players5_si", "players5_mp", "players4_mp", "players3_mp", "players2_mp", "players1_mp",
"players5_co", "players4_co", "players3_co", "players2_co", "players1_co","players1_oc","players2_oc", "players3_oc", "players4_oc", "players5_oc", "players1_pvp","players2_pvp", "players3_pvp", "players4_pvp", "players5_pvp",
"players5", "players4", "players3", "players2", "players1"))
# Replace na with zeros for each of the player options
df_games_complete$singleplayer <- df_games_complete$singleplayer %>%
replace_na(0)
df_games_complete$multiplayer <- df_games_complete$multiplayer %>%
replace_na(0)
df_games_complete$coop <- df_games_complete$coop %>%
replace_na(0)
df_games_complete$o_coop <- df_games_complete$o_coop %>%
replace_na(0)
df_games_complete$pvp <- df_games_complete$pvp %>%
replace_na(0)
#############################################################################
################### DATA PREP ORIGINIAL COSTS ###############################
#############################################################################
# Change "Free To Play" to all lower cases
df_games_complete$originalcost <- df_games_complete$originalcost %>%
tolower()
# Change free to play to $0, remove $ and make it numeric
df_games_complete$originalcost[df_games_complete$originalcost == "free to play"] <- "$0"
df_games_complete$originalcost <- sub(".", "", df_games_complete$originalcost)
df_games_complete$originalcost <- as.numeric(df_games_complete$originalcost)
# Rename column to keep the $ information
df_games_complete <- df_games_complete %>%
rename("originalcost_$" = originalcost)
##############################################################################
#################### CONTROLLING FOR PUBLISHER SIZE ##########################
##############################################################################
# Extracting unique publishers from the sales dataset (vgchartz)
unique_pub <- df_sales %>%
distinct(name, .keep_all = TRUE)
# Count number of unique publishers
num_pub <- unique_pub %>%
group_by(publisher) %>%
summarize(num_g_pub=n())
# Adding the publisher dummies to the df_games_complete dataset
df_games_complete <- df_games_complete %>%
left_join(num_pub, by = "publisher")
##############################################################################
####################### LANGUAGES ############################################
##############################################################################
# Counting number of language options
df_games_complete$num_languages <- lengths(gregexpr("\\W+", df_games_complete$languages)) + 1
df_games_complete$num_languages <- as.numeric(df_games_complete$num_languages)
#############################################################################
################################ GENRE ######################################
#############################################################################
# Creating dummies for genres
# df_games_complete$gen_action <- ifelse(df_games_complete$game_genre == "Action", 1, ifelse(df_games_complete$game_genre == "Shooter", 1, ifelse(df_games_complete$game_genre == "Platform", 1, ifelse(df_games_complete$game_genre == "Action-Adventure", 1, ifelse(df_games_complete$game_genre == "Fighting", 1,0)))))
df_games_complete$gen_adventure <- ifelse(df_games_complete$game_genre == "Adventure", 1, ifelse(df_games_complete$game_genre == "Visual+Novel", 1, 0))
df_games_complete$gen_racing <- ifelse(df_games_complete$game_genre == "Racing", 1,0)
df_games_complete$gen_roleplaying <- ifelse(df_games_complete$game_genre == "Role-Playing", 1,0)
df_games_complete$gen_simulation <- ifelse(df_games_complete$game_genre == "Simulation", 1,0)
df_games_complete$gen_sports <- ifelse(df_games_complete$game_genre == "Sports", 1,0)
df_games_complete$gen_strategy <- ifelse(df_games_complete$game_genre == "Strategy", 1,0)
df_games_complete$gen_misc <- ifelse(df_games_complete$game_genre == "Misc", 1, ifelse(df_games_complete$game_genre == "Puzzle", 1, ifelse(df_games_complete$game_genre == "Music", 1, 0)))
df_games_complete$gen_mmo <- ifelse(df_games_complete$game_genre == "MMO", 1,0)
###############################################################################
####################### CREATE PLATFORM DUMMIES ###############################
###############################################################################
df_games_complete$plf_pc <- ifelse(df_games_complete$platform == "PC", 1, 0)
# df_games_complete$plf_con <- ifelse(df_games_complete$platform != "PC", 1,0)
df_games_complete$plf_pc <- as.numeric(df_games_complete$plf_pc)
# df_games_complete$plf_con <- as.numeric(df_games_complete$plf_con)
###############################################################################
####################### RE-ORDER, SAVING AND WRITING CSV ######################
###############################################################################
# Re-order the dataset
fin_games_dataset <- df_games_complete[,c("name", "global_sales_m", "meta_user_score", "meta_critic_score",  "platform", "plf_pc", "publisher", "developer", "num_g_pub", "game_genre", "gen_adventure", "gen_racing", "gen_roleplaying", "gen_simulation", "gen_sports", "gen_strategy", "gen_mmo", "gen_misc", "franchise", "originalcost_$", "meta_release_date","players", "singleplayer", "multiplayer", "coop", "o_coop", "pvp", "controller", "meta_esrb", "esrb_everyone", "esrb_teens", "esrb_pending", "indie", "soundtrack", "presence", "languages", "num_languages")]
# Read platform release dates dataset
platform_year <- read.xlsx("../data/platform_release_dates.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = TRUE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NULL, cols = NULL, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
# Add the platform release dates to the existing dataset
fin_games_dataset <- fin_games_dataset %>%
left_join(platform_year, by = "platform")
fin_games_dataset$meta_release_date <- as.Date(fin_games_dataset$meta_release_date, format = "%b-%d-%Y")
fin_games_dataset <- fin_games_dataset %>%
mutate(release_diff_days = meta_release_date - platform_release_date)
fin_games_dataset$release_diff_days <- gsub("days", "", fin_games_dataset$release_diff_days)
fin_games_dataset$release_diff_days <- as.numeric(fin_games_dataset$release_diff_days)
fin_games_dataset$release_diff_days <- ifelse(fin_games_dataset$release_diff_days < 0, "0", fin_games_dataset$release_diff_days)
fin_games_dataset$num_g_pub <- as.numeric(fin_games_dataset$num_g_pub)
# fin_games_dataset$gen_action <- as.numeric(fin_games_dataset$gen_action)
fin_games_dataset$gen_adventure <- as.numeric(fin_games_dataset$gen_adventure)
fin_games_dataset$gen_racing <- as.numeric(fin_games_dataset$gen_racing)
fin_games_dataset$gen_roleplaying <- as.numeric(fin_games_dataset$gen_roleplaying)
fin_games_dataset$gen_simulation <- as.numeric(fin_games_dataset$gen_simulation)
fin_games_dataset$gen_sports <- as.numeric(fin_games_dataset$gen_sports)
fin_games_dataset$gen_strategy <- as.numeric(fin_games_dataset$gen_strategy)
fin_games_dataset$gen_mmo <- as.numeric(fin_games_dataset$gen_mmo)
fin_games_dataset$gen_misc <- as.numeric(fin_games_dataset$gen_misc)
fin_games_dataset$`originalcost_$` <- as.numeric(fin_games_dataset$`originalcost_$`)
# fin_games_dataset$singleplayer <- as.numeric(fin_games_dataset$singleplayer)
fin_games_dataset$multiplayer <- as.numeric(fin_games_dataset$multiplayer)
fin_games_dataset$coop <- as.numeric(fin_games_dataset$coop)
# fin_games_dataset$o_coop <- as.numeric(fin_games_dataset$o_coop)
# fin_games_dataset$pvp <- as.numeric(fin_games_dataset$pvp)
fin_games_dataset$controller <- as.numeric(fin_games_dataset$controller)
fin_games_dataset$esrb_everyone <- as.numeric(fin_games_dataset$esrb_everyone)
fin_games_dataset$esrb_teens <- as.numeric(fin_games_dataset$esrb_teens)
# fin_games_dataset$esrb_adults <- as.numeric(fin_games_dataset$esrb_adults)
fin_games_dataset$esrb_pending <- as.numeric(fin_games_dataset$esrb_pending)
fin_games_dataset$indie <- as.numeric(fin_games_dataset$indie)
fin_games_dataset$soundtrack <- as.numeric(fin_games_dataset$soundtrack)
fin_games_dataset$presence <- as.numeric(fin_games_dataset$presence)
fin_games_dataset$num_languages <- as.numeric(fin_games_dataset$num_languages)
fin_games_dataset$release_diff_days <- as.numeric(fin_games_dataset$release_diff_days)
vg_data <- fin_games_dataset %>%
rename(USV = global_sales_m,
CONREV = meta_user_score,
PROFREV = meta_critic_score,
GEN_AD = gen_adventure,
GEN_RA = gen_racing,
GEN_RP = gen_roleplaying,
GEN_SI = gen_simulation,
GEN_SP = gen_sports,
GEN_ST = gen_strategy,
GEN_MO = gen_mmo,
GEN_MI = gen_misc,
OPUSD = "originalcost_$",
FRANC = franchise,
ESRB_RP = esrb_pending,
ESRB_E = esrb_everyone,
ESRB_T = esrb_teens,
PUBS = num_g_pub,
LCP = release_diff_days,
N_LAN = num_languages,
INDIE = indie,
SMPRES = presence,
PLF_PC = plf_pc)
write.csv(vg_data, "../gen/full_videogame_dataset.csv", row.names = FALSE)
setwd("C:/Users/prive/MSc - Marketing Analytics/Thesis/videogame_industry_data/src")
# Loading data
vg_data <- read.csv("../gen/full_videogame_dataset.csv")
vg_data <- vg_data %>%
mutate(ln_USV = log(USV))
vg_data_test <- vg_data
vg_data_test <- drop_na(vg_data_test)
setwd("C:/Users/prive/MSc - Marketing Analytics/Thesis/videogame_industry_data/src")
library(readr)
library(dplyr)
library(tidyverse)
library(modelsummary)
library(tidyr)
library(broom)
library(AER)
library(systemfit)
# Loading data
vg_data <- read.csv("../gen/full_videogame_dataset.csv")
vg_data <- vg_data %>%
mutate(ln_USV = log(USV))
vg_data_test <- vg_data
vg_data_test <- drop_na(vg_data_test)
summary(vg_data_test$USV)
SD_USV <- sd(vg_data_test$USV)
summary(vg_data_test$CONREV)
SD_CONREV <- sd(vg_data_test$CONREV)
summary(vg_data_test$PROFREV)
SD_PROFREV <- sd(vg_data_test$PROFREV)
summary(vg_data_test$OPUSD)
SD_OPUSD <- sd(vg_data_test$OPUSD)
# Boxplot for outliers
boxplot(vg_data$ln_USV, main="Global sales", sub=paste("Outlier rows: ", boxplot.stats(vg_data$ln_USV)$out))
# Linear regression
linmod_1 <- lm(ln_USV ~ CONREV +
PROFREV +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_coop +
pvp +
PLF_PC +
ESRB_RP +
ESRB_E +
ESRB_T
,data=vg_data_test, na.action = na.omit)
print(linmod_1)
summary_linmod_1 <- summary(linmod_1)
summary_linmod_1
coeffs_linmod_1 <- summary_linmod_1$coefficients
beta.estimate_CONREV <- coeffs_linmod_1["meta_user_score", "Estimate"]
std.error_CONREV <- coeffs_linmod_1["meta_user_score", "Std. Error"]
t_value_CONREV <- beta.estimate_CONREV/std.error_CONREV
p_value_CONREV <- 2*pt(-abs(t_value_CONREV), df=nrow(vg_data)-ncol(vg_data))
f_statistic_CONREV <- linmod_1$fstatistic[1]
f <- summary(linmod_1)$fstatistic
model_p <- pf(f[1], f[2], f[3], lower=FALSE)
print(model_p)
AIC_linmod_1 <- AIC(linmod_1)
BIC_linmod_1 <- BIC(linmod_1)
print(summary_linmod_1)
tidy_linmod_1 <- tidy(linmod_1, conf.int = T)
tidy_linmod_1
###############################################################################
################### INCL CONTROL VARIABLES ####################################
###############################################################################
covariates <- cbind(vg_data_test$PUBS, vg_data_test$INDIE, vg_data_test$soundtrack, vg_data_test$SMPRES, vg_data_test$N_LAN, vg_data_test$LCP)
# Linear regression including control variables
linmod_2 <- lm(ln_USV ~ CONREV +
PROFREV +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_coop +
pvp +
PLF_PC +
ESRB_RP +
ESRB_E +
ESRB_T +
covariates,
data=vg_data_test, na.action = na.omit)
print(linmod_2)
summary_linmod_2 <- summary(linmod_2)
summary_linmod_2
tidy_linmod_2 <- tidy(linmod_2, conf.int = T)
tidy_linmod_2
###############################################################################
################### INTERACTION TERMS INCLUDED ################################
###############################################################################
# Linear regression including interaction terms
lin_mod_3 <- lm(ln_USV ~ (CONREV * FRANC) +
(CONREV * GEN_AD) +
(CONREV * GEN_RA) +
(CONREV * GEN_RP) +
(CONREV * GEN_SI) +
(CONREV * GEN_SP) +
(CONREV * GEN_ST) +
(CONREV * GEN_MO) +
(CONREV * GEN_MI) +
(CONREV * OPUSD) +
(CONREV * singleplayer) +
(CONREV * multiplayer) +
(CONREV * coop) +
(CONREV * o_coop) +
(CONREV * pvp) +
(CONREV * PLF_PC) +
(CONREV * ESRB_RP) +
(CONREV * ESRB_E) +
(CONREV * ESRB_T) +
(PROFREV * FRANC) +
(PROFREV * GEN_AD) +
(PROFREV * GEN_RA) +
(PROFREV * GEN_RP) +
(PROFREV * GEN_SI) +
(PROFREV * GEN_SP) +
(PROFREV * GEN_ST) +
(PROFREV * GEN_MO) +
(PROFREV * GEN_MI) +
(PROFREV * OPUSD) +
(PROFREV * singleplayer) +
(PROFREV * multiplayer) +
(PROFREV * coop) +
(PROFREV * o_coop) +
(PROFREV * pvp) +
(PROFREV * PLF_PC) +
(PROFREV * ESRB_RP) +
(PROFREV * ESRB_E) +
(PROFREV * ESRB_T) +
covariates,
data=vg_data_test, na.action = na.omit)
wt <- 1 / lm(abs(linmod_2$residuals) ~ linmod_2$fitted.values)$fitted.values^2
wls_mod_2 <- lm(ln_USV ~ CONREV +
PROFREV +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_coop +
pvp +
PLF_PC +
ESRB_RP +
ESRB_E +
ESRB_T +
covariates,
data=vg_data_test,
weights = wt, na.action = na.omit)
print(wls_mod_2)
summary_wls_mod_2 <- summary(wls_mod_2)
summary_wls_mod_2
tidy_wls_mod_2 <- tidy(wls_mod_2, conf.int = T)
tidy_wls_mod_2
###############################################################################
################### INTERACTION TERMS INCLUDED ################################
###############################################################################
# Linear regression including interaction terms
wls_mod_3 <- lm(ln_USV ~ (CONREV * FRANC) +
(CONREV * GEN_AD) +
(CONREV * GEN_RA) +
(CONREV * GEN_RP) +
(CONREV * GEN_SI) +
(CONREV * GEN_SP) +
(CONREV * GEN_ST) +
(CONREV * GEN_MO) +
(CONREV * GEN_MI) +
(CONREV * OPUSD) +
(CONREV * singleplayer) +
(CONREV * multiplayer) +
(CONREV * coop) +
(CONREV * o_coop) +
(CONREV * pvp) +
(CONREV * PLF_PC) +
(CONREV * ESRB_RP) +
(CONREV * ESRB_E) +
(CONREV * ESRB_T) +
(PROFREV * FRANC) +
(PROFREV * GEN_AD) +
(PROFREV * GEN_RA) +
(PROFREV * GEN_RP) +
(PROFREV * GEN_SI) +
(PROFREV * GEN_SP) +
(PROFREV * GEN_ST) +
(PROFREV * GEN_MO) +
(PROFREV * GEN_MI) +
(PROFREV * OPUSD) +
(PROFREV * singleplayer) +
(PROFREV * multiplayer) +
(PROFREV * coop) +
(PROFREV * o_coop) +
(PROFREV * pvp) +
(PROFREV * PLF_PC) +
(PROFREV * ESRB_RP) +
(PROFREV * ESRB_E) +
(PROFREV * ESRB_T) +
covariates,
data=vg_data_test, weights = wt, na.action = na.omit)
print(wls_mod_3)
summary_wls_mod_3 <- summary(wls_mod_3)
summary_wls_mod_3
tidy_wls_mod_3 <- tidy(wls_mod_3, conf.int = T)
tidy_wls_mod_3
models <- list(linmod_1, linmod_2, wls_mod_2, wls_mod_3)
names(models) <- c("OLS", "OLS + COV", "WLS", "WLS + interaction")
msummary(models, gof_omit = "AIC|BIC|Log|Pseudo", stars=T, title = "Table X. Regression models summary", statistic = "statistic")
# Model reporting via Stargazer
library(stargazer)
stargazer(models,
title = "Table X. Regression models summary",
dep.var.caption = "USV",
dep.var.labels = "",
covariate.labels = ,
column.labels = c("OLS", "OLS + COV", "WLS", "WLS + interaction"),
notes.label = "Significance levels",
type="text",
out="output.html"
)
instr_var <- cbind(vg_data_test$PLF_PC)
endo_var <- cbind(vg_data_test$CONREV, vg_data_test$PROFREV)
exo_var <- cbind(vg_data_test$FRANC, vg_data_test$GEN_AD, vg_data_test$GEN_RA, vg_data_test$GEN_RP, vg_data_test$GEN_SI, vg_data_test$GEN_SP, vg_data_test$GEN_SI, vg_data_test$GEN_MO, vg_data_test$GEN_MI, vg_data_test$OPUSD, vg_data_test$singleplayer, vg_data_test$multiplayer, vg_data_test$coop, vg_data_test$o_coop, vg_data_test$pvp, vg_data_test$ESRB_RP, vg_data_test$ESRB_E, vg_data_test$ESRB_T, covariates)
two_sls_mod_1 <- ivreg(ln_USV ~ endo_var + exo_var | exo_var + instr_var, data=vg_data_test, na.action = na.omit)
summary(two_sls_mod_1)
ols_test_0 <- lm(ln_USV ~ CONREV +
PROFREV +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_coop +
pvp +
ESRB_RP +
ESRB_E +
ESRB_T +
covariates,
data=vg_data_test, na.action = na.omit)
ols_test_1 <- lm(CONREV ~ PROFREV +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_coop +
pvp +
ESRB_RP +
ESRB_E +
ESRB_T +
PLF_PC +
covariates,
data=vg_data_test, na.action = na.omit)
summary(ols_test_1)
CONREV_hat <- fitted(ols_test_1)
ols_test_2 <- lm(PROFREV ~ CONREV +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_coop +
pvp +
ESRB_RP +
ESRB_E +
ESRB_T +
PLF_PC +
covariates,
data=vg_data_test, na.action = na.omit)
summary(ols_test_2)
PROFREV_hat <- fitted(ols_test_2)
ols_test_3 <- lm(ln_USV ~ CONREV_hat +
PROFREV_hat +
FRANC +
GEN_AD +
GEN_RA +
GEN_RP +
GEN_SI +
GEN_SP +
GEN_ST +
GEN_MO +
GEN_MI +
OPUSD +
singleplayer +
multiplayer +
coop +
o_co op +
pvp +
ESRB_RP +
ESRB_E +
ESRB_T +
covariates,
data=vg_data_test, na.action = na.omit)
summary(ols_test_3)
models_2 <- list(linmod_1, linmod_2, wls_mod_2, wls_mod_3, ols_test_3)
names(models_2) <- c("OLS", "OLS + COV", "WLS", "WLS + interaction", "2SLS")
msummary(models_2, gof_omit = "AIC|BIC|Log|Pseudo", stars=T, title = "Table X. Regression models summary", statistic = "statistic")
# Hausman test for edogeneity of regressors
cf_diff <- coef(ols_test_3) - coef(ols_test_0)
vc_diff <- vcov(ols_test_3) - coef(ols_test_0)
x2_diff <- as.vector(t(cf_diff) %*% solve(vc_diff) %*% cf_diff)
pchisq(x2_diff, df = 2, lower.tail = FALSE)
